// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefToken = `-- name: CreateRefToken :one
INSERT INTO refresh_tokens (
    token ,
    created_at ,
    updated_at ,   
    expires_at ,  
    user_id )
VALUES (
    $1,
    NOW(),
    NOW(),
    $3,
    $2
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefToken(ctx context.Context, arg CreateRefTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT token, created_at, updated_at, expires_at, revoked_at, user_id FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE refresh_tokens SET (updated_at, revoked_at) = (NOW(), NOW())
WHERE token = $1
RETURNING expires_at
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, token)
	var expires_at time.Time
	err := row.Scan(&expires_at)
	return expires_at, err
}
